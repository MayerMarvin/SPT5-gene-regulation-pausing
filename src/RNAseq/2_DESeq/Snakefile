configfile: "/g/furlong/project/92_SPT4_SPT5/RNA-Seq/config/RNAseq_config.yml"


# Variables
RNASEQ_LINES = list(config["RNA-Seq"].keys())
RNASEQ_LINES_CONDITIONS = [[line, condition] for line in RNASEQ_LINES for condition in list(config["RNA-Seq"][line].keys())]
RNASEQ_SAMPLES = [list(item.items())[0][0] for sublist in [config["RNA-Seq"][line][condition] for line, condition in RNASEQ_LINES_CONDITIONS] for item in sublist]
SAMPLES_STRAND = {list(item.items())[0][0]: list(item.items())[0][1] for sublist in [config["RNA-Seq"][line][condition] for line, condition in RNASEQ_LINES_CONDITIONS] for item in sublist}
CONTRASTS = RNASEQ_LINES + ["SPT5longLEXY_Dark"]

# Paths
PROJECT_DIR = config["global"]["projectpath"]
RNA_SEQ_DIR = PROJECT_DIR + "/" + config["global"]["RNA-Seq_dir"]
SCRATCH_TEMP_DIR = config["global"]["scratch_dir"]
FASTQ_DIR = RNA_SEQ_DIR + "/" + config["global"]["fastq_dir"]
RSEM_DIR = RNA_SEQ_DIR + "/" + config["global"]["RSEM_dir"]
DESEQ_DIR = RNA_SEQ_DIR + "/" + config["global"]["DESeq_dir"]
IREADS_DIR = RNA_SEQ_DIR + "/" + config["global"]["ireads_dir"]

# Annotation
RSEM_REFERENCE = config["annotation"]["rsem"]
GENE_NAME = config["annotation"]["FBgn_name"]

# Targets
RSEM_OUT = expand("{path}/{sample}.genes.results", path=RSEM_DIR, sample=RNASEQ_SAMPLES)
FORMAT_OUT = expand("{path}/{sample}.genes.counts.txt", path=RSEM_DIR, sample=RNASEQ_SAMPLES)
DESEQ_OUT = expand("{path}/{contrast}/tables/row.counts.tsv", path=DESEQ_DIR, contrast=CONTRASTS)
INTRON_RETENTION_OUT = expand("{path}/{sample}_markdup.ir.txt", path=IREADS_DIR, sample=RNASEQ_SAMPLES)


rule all:
    input:
        RSEM_OUT, FORMAT_OUT, DESEQ_OUT, INTRON_RETENTION_OUT


rule RSEM_expression:
    input:
        fastq_1 = expand("{path}/{{sample}}_1.fastq.gz", path=FASTQ_DIR),
        fastq_2 = expand("{path}/{{sample}}_2.fastq.gz", path=FASTQ_DIR),
    output:
        expand("{path}/{{sample}}.genes.results", path=RSEM_DIR),
    params:
        strandedness = lambda wildcards: config["experiment_type_strand"][SAMPLES_STRAND[wildcards.sample]],
        mapper = "--star",
        bam_output = "--no-bam-output",
        rsem_reference = RSEM_REFERENCE,
    resources:
        cpu = 8,
        memPerCpu = 4000,
        time = 480
    threads: 8
    conda: 
        "../../../config/RSEM_env.yml" # version 1.3.3
    shell:
        """
        cd {RSEM_DIR}

        rsem-calculate-expression \
        --paired-end {input.fastq_1} {input.fastq_2} \
        {params.rsem_reference} {wildcards.sample} \
        --strandedness {params.strandedness} \
        {params.mapper} {params.bam_output} -p {threads} \
        --star-path `which STAR | sed 's/STAR.*//g'` \
        --star-gzipped-read-file
        """


rule format_counts:
    input:
        expand("{path}/{{sample}}.genes.results", path=RSEM_DIR)
    output:
        expand("{path}/{{sample}}.genes.counts.txt", path=RSEM_DIR)
    resources:
        cpu = 1,
        memPerCpu = 1000,
        time = 5
    shell:
        """
        cat {input} | tail -n +2 | cut -f1,5 | awk '{{print $1 "\\t" int($2)}}' | sort -k1,1 > {output}
        """


rule run_DESeq:
    input:
        metaTable = "DESeq_config/metaTable_{contrast}",
        contrast = "DESeq_config/Contrasts_{contrast}",
        counts = FORMAT_OUT,
    output:
        expand("{path}/{{contrast}}/tables/row.counts.tsv", path=DESEQ_DIR),
    params:
        DESeq_bin = config["tools"]["DESeq_bin"],
        RSEM_dir = RSEM_DIR,
        design = "~condition",
        max_adj_pvalue = 0.01,
        min_FC = 1,
        min_FPKM = 1,
        gene_length_file = config["annotation"]["gene_length_file"],
        out_folder = DESEQ_DIR + "/{contrast}/",
    conda: "../../../config/DESeq_env.yml" # version 1.38.3
    shell:
        """
        rm -fr {params.out_folder}

	    Rscript {params.DESeq_bin} -e {params.RSEM_dir} -o {params.out_folder} \
        -m {input.metatable} -c {input.contrast} -d {params.design} -p {params.max_adj_pvalue} \
        -f {params.min_FC} -x {params.min_FPKM} -l {params.gene_length_file}
        """

rule run_intron_retention: 
    input:
        bam = expand("{path}/mapped/{{sample}}_markdup.bam", path=SCRATCH_TEMP_DIR)
    output:
        expand("{path}/{{sample}}_markdup.ir.txt", path=IREADS_DIR)
    resources:
        cpu = 1,
        memPerCpu = 32000,
        time = 120
    params:
        ireads_bin = config["tools"]["ireads"], # version 0.8.9
        intron_bed = config["annotation"]["intron_bed"],
        output_dir = IREADS_DIR,
        min_FPKM = 1,
        min_mapQ = 255
    conda: "../../../config/ireads_env.yml"
    shell:
        """
        TOT_MAPPED=`samtools flagstat {input.bam} | grep "properly paired" \
            | sed 's/\\ /\\t/g' | cut -f1`

        cd `echo {params.ireads_bin} | sed 's/\/iread.py//'`

        awk '{{print "chr" $0}}' {params.intron_bed} \
        | sort -k1,1 -k2,2g > {output}.temp.bed

        python {params.ireads_bin} {input.bam} {output}.temp.bed \
        -o {params.output_dir} -t $TOT_MAPPED -q {params.min_mapQ} \
        -f {params.min_FPKM} -k {resources.cpu} -s {resources.cpu} \
        -m 32

        rm {output}.temp*
        """


